<!DOCTYPE html>
<html><head>
        <title>Python Notes</title>
</head>
<body>
    <h1>PYTHON</h1>
    <div class="para">
    <p>
           <br> Python is a multi-paradigm programming language. Object-oriented programming and structured programming are fully supported, and many of its features support functional programming and aspect-oriented programming (including by metaprogramming and metaobjects (magic methods)). Many other paradigms are supported via extensions, including design by contract and logic programming.

           <br>  Python uses dynamic typing, and a combination of reference counting and a cycle-detecting garbage collector for memory management. It also features dynamic name resolution (late binding), which binds method and variable names during program execution.
            
           <br>Python's design offers some support for functional programming in the Lisp tradition. It has filter, map, and reduce functions; list comprehensions, dictionaries, sets and generator expressions. The standard library has two modules (itertools and functools) that implement functional tools borrowed from Haskell and Standard ML.
            
           <br>Summarize:
            
           <br>Beautiful is better than ugly
        <br> Explicit is better than implicit<br>
            Simple is better than complex<br>
            Complex is better than complicated<br>
            Readability counts<br>
            Libraries
            
            <br> <h2>  Syntax and semantics:</h2>
            <br> Main article: Python syntax and semantics
            <br>  Python is meant to be an easily readable language. Its formatting is visually uncluttered, and it often uses English keywords where other languages use punctuation. Unlike many other languages, it does not use curly brackets to delimit blocks, and semicolons after statements are optional. It has fewer syntactic exceptions and special cases than C or Pascal.


            <br> Python's large standard library, commonly cited as one of its greatest strengths, provides tools suited to many tasks. For Internet-facing applications, many standard formats and protocols such as MIME and HTTP are supported. It includes modules for creating graphical user interfaces, connecting to relational databases, generating pseudorandom numbers, arithmetic with arbitrary precision decimals manipulating regular expressions, and unit testing.
            
            <br>   Some parts of the standard library are covered by specifications (for example, the Web Server Gateway Interface (WSGI) implementation wsgiref follows PEP 333), but most modules are not. They are specified by their code, internal documentation, and test suites (if supplied). However, because most of the standard library is cross-platform Python code, only a few modules need altering or rewriting for variant implementations.
            
            <br>    As of March 2018, the Python Package Index (PyPI), the official repository for third-party Python software, contains over 130,000 packages with a wide range of functionality, including:
            
            <br> <h2>  Graphical user interfaces:</h2>
            <br> Web frameworks
            <br><br>  Multimedia
            <br>   Databases
            <br>  Networking
            <br> Test frameworks
            <br> Automation
            <br> Web scraping
            <br> Documentation
            <br>  System administration
            <br> Scientific computing
            <br> Text processing
            <br> Image processing
            <br><h2>  Development environments</h2>
            <br> See also: Comparison of integrated development environments § Python
            <br> Most Python implementations (including CPython) include a read–eval–print loop (REPL), permitting them to function as a command line interpreter for which the user enters statements sequentially and receives results immediately.
            
            <br> Other shells, including IDLE and IPython, add further abilities such as auto-completion, session state retention and syntax highlighting.
            
            <br>  As well as standard desktop integrated development environments, there are Web browser-based IDEs; SageMath (intended for developing science and math-related Python programs); PythonAnywhere, a browser-based IDE and hosting environment; and Canopy IDE, a commercial Python IDE emphasizing scientific computing.
            
            <br>   Implementations
            <br> See also: List of Python software § Python implementations


</p>
</div>
    <h5>For more reference...</h5>
    
        <form action="https://youtu.be/vaysJAMDaZw"><button class="but">Videos is here</button></form>
       
        <br> <br>
    <form action="https://python.cs.southern.edu/pythonbook/pythonbook.pdf"><button class="but">Book is here</button></form>
    
   
    <style>
    h1{
        text-align: center;
         color: red;
    
    }
    .para{
            font-style: italic;
           
            font-size: 20px;
    }
    h5{
            color:black;
            font-size: 15px;
    }
    .but{
    background-color: red;
    margin: 10px;
    padding-bottom: 20px;
    padding-top: 20px;
    border-radius: 50%;
    padding-left: 20px;
    padding-right: 20px;
    font-style: inherit;
    
    color: white;
}
.but:hover{

background-color: red;
border-color:red;
color: black;


}
h2{

color:greenyellow;
}
    
    </style>
</body>
</html>